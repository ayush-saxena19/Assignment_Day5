Q1> Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays.

Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.

Input:
5 3
1 2 3 4 5
Output: 
1, 2, 3, 4 and 5 are the
elements which comes in the union set
of both arrays.

Solution 1->

<script>
       function getUnion(a, n, b, m) {
		var s = new Set();
		for (let i = 0; i < n; i++)
			s.add(a[i]);
                for (let i = 0; i < m; i++)
			s.add(b[i]);
		document.write(
		"Number of elements after union operation: "
		+ s.size + "<br>");
		document.write("The union set of both arrays is :");
		document.write("<br>");
		var arr = [];
		for (let itr of s)
			arr.push(itr);
		arr.sort(function (a, b) { return a - b; })
		for (let i = 0; i < arr.length; i++) {
			document.write(arr[i] + " ");
		}
	}
        let a = [1, 2, 5, 6, 2, 3, 5, 7, 3];
	let b = [2, 4, 5, 6, 8, 9, 4, 6, 5, 4];
        getUnion(a, 9, b, 10);
</script>


--------------------------------------------------------------------------------------------------------------------

Q2> Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.

Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.

Solution 2->

<script>
function find3Numbers(A, arr_size, sum)
{
	let l, r;
	for (let i = 0; i < arr_size - 2; i++)
	{
		for (let j = i + 1; j < arr_size - 1; j++)
		{
			for (let k = j + 1; k < arr_size; k++)
			{
				if (A[i] + A[j] + A[k] == sum)
				{
					document.write("Triplet is " + A[i] +
						", " + A[j] + ", " + A[k]);
					return true;
				}
			}
		}
	}
}
	let A = [ 1, 4, 45, 6, 10, 8 ];
	let sum = 22;
	let arr_size = A.length;
	find3Numbers(A, arr_size, sum);
</script>


----------------------------------------------------------------------------------------------------------
Q3> Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Input:
N = 7
a[] = {2,6,1,9,4,5,3}
Output:
6
Explanation:
The consecutive numbers here
are 1, 2, 3, 4, 5, 6. These 6 
numbers form the longest consecutive
subsquence.

Solution 3->

<script>
	function findLongestConseqSubseq(arr, n) {
		let ans = 0, count = 0;
		arr.sort(function (a, b) { return a - b; })

		var v = [];
		v.push(arr[0]);
		for (let i = 1; i < n; i++) {
			if (arr[i] != arr[i - 1])
				v.push(arr[i]);
		}
		for (let i = 0; i < v.length; i++) {
			if (i > 0 && v[i] == v[i - 1] + 1)
				count++;
			else
				count = 1;
			ans = Math.max(ans, count);
		}
		return ans;
	}
        let arr = [1, 2, 2, 3];
	let n = arr.length;
	document.write(
	"Length of the Longest contiguous subsequence is "
	+findLongestConseqSubseq(arr, n)
	);
</script>


